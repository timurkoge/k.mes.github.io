// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const users = {
    '–ê—Ä—Ç—É—Ä': { password: '125364', color: '#2ecc71' },
    '–î–∞–º–∏—Ä': { password: '154525', color: '#f1c40f' },
    '–ö–∞—Ä–∏–º': { password: '135635', color: '#e74c3c' },
    '–¢–∏–º—É—Ä': { password: '237560', color: '#3498db' }
};

// –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
const stickers = [
    'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£',
    'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞',
    'üòò', 'üòó', 'üòô', 'üòö', 'üòã', 'üòõ', 'üòù', 'üòú',
    'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü•∏', 'ü§©', 'ü•≥',
    'üò¢', 'üò≠', 'üò§', 'üò†', 'ü§¨', 'üò±', 'ü•µ', 'ü•∂'
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
function initMessenger(currentUser) {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤
    let chats = loadChatsFromLocalStorage();
    let activeChat = 'group-chat';
    
    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    const elements = {
        userAvatar: document.getElementById('user-avatar'),
        userName: document.getElementById('user-name'),
        chatsList: document.getElementById('chats-list'),
        messagesContainer: document.getElementById('messages-container'),
        currentChatAvatar: document.getElementById('current-chat-avatar'),
        currentChatName: document.getElementById('current-chat-name'),
        messageInput: document.getElementById('message-input'),
        sendBtn: document.getElementById('send-btn'),
        logoutBtn: document.getElementById('logout-btn'),
        attachBtn: document.getElementById('attach-btn'),
        stickersBtn: document.getElementById('stickers-btn'),
        clearChatBtn: document.getElementById('clear-chat'),
        stickersModal: document.getElementById('stickers-modal'),
        fileModal: document.getElementById('file-modal'),
        stickersGrid: document.getElementById('stickers-grid'),
        fileInput: document.getElementById('file-input'),
        sendFileBtn: document.getElementById('send-file-btn'),
        stickerPreview: document.getElementById('sticker-preview'),
        sendStickerBtn: document.getElementById('send-sticker-btn')
    };

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elements.userAvatar.textContent = currentUser.name.charAt(0);
    elements.userAvatar.style.backgroundColor = currentUser.color;
    elements.userName.textContent = currentUser.name;

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    function loadChatsList() {
        elements.chatsList.innerHTML = '';
        
        Object.keys(chats).forEach(chatId => {
            const chat = chats[chatId];
            const lastMessage = chat.messages.length > 0 
                ? chat.messages[chat.messages.length - 1].text || 'üìé –§–∞–π–ª'
                : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
            
            const chatItem = document.createElement('div');
            chatItem.className = `chat-item ${chatId === activeChat ? 'active' : ''}`;
            chatItem.setAttribute('data-chat', chatId);
            
            chatItem.innerHTML = `
                <div class="chat-avatar" style="background: ${chatId === 'group-chat' ? chat.color : getUserColor(chatId)}">
                    ${chat.avatar}
                </div>
                <div class="chat-info">
                    <div class="chat-name">${chat.name}</div>
                    <div class="chat-preview">${lastMessage.length > 25 ? lastMessage.substring(0, 25) + '...' : lastMessage}</div>
                </div>
            `;
            
            chatItem.addEventListener('click', () => {
                activeChat = chatId;
                loadChatsList();
                displayMessages(activeChat);
            });
            
            elements.chatsList.appendChild(chatItem);
        });
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    function displayMessages(chatId) {
        const chat = chats[chatId];
        elements.messagesContainer.innerHTML = '';
        elements.currentChatName.textContent = chat.name;
        elements.currentChatAvatar.textContent = chat.avatar;
        elements.currentChatAvatar.style.background = chatId === 'group-chat' ? chat.color : getUserColor(chatId);
        
        chat.messages.forEach(msg => {
            const isCurrentUser = msg.sender === currentUser.name;
            const messageElement = document.createElement('div');
            messageElement.className = `message ${isCurrentUser ? 'my-message' : ''}`;
            
            if (msg.isSticker) {
                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞
                messageElement.innerHTML = `
                    ${!isCurrentUser ? `
                    <div class="message-avatar" style="background-color: ${getUserColor(msg.sender)}">
                        ${msg.sender.charAt(0)}
                    </div>` : ''}
                    
                    <div class="message-content">
                        ${!isCurrentUser ? `<div class="message-sender">${msg.sender}</div>` : ''}
                        <div class="sticker-message">${msg.text}</div>
                        <div class="message-time">${msg.time}</div>
                    </div>
                    
                    ${isCurrentUser ? `
                    <div class="message-avatar" style="background-color: ${currentUser.color}">
                        ${currentUser.name.charAt(0)}
                    </div>` : ''}
                `;
            } else if (msg.file) {
                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                messageElement.innerHTML = `
                    ${!isCurrentUser ? `
                    <div class="message-avatar" style="background-color: ${getUserColor(msg.sender)}">
                        ${msg.sender.charAt(0)}
                    </div>` : ''}
                    
                    <div class="message-content">
                        ${!isCurrentUser ? `<div class="message-sender">${msg.sender}</div>` : ''}
                        <div class="file-message" onclick="downloadFile('${msg.file.url}', '${msg.file.name}')">
                            <div class="file-icon">
                                <i class="fas ${getFileIcon(msg.file.type)}"></i>
                            </div>
                            <div class="file-name">${msg.file.name}</div>
                            <div class="file-download">
                                <i class="fas fa-download"></i>
                            </div>
                        </div>
                        <div class="message-time">${msg.time}</div>
                    </div>
                    
                    ${isCurrentUser ? `
                    <div class="message-avatar" style="background-color: ${currentUser.color}">
                        ${currentUser.name.charAt(0)}
                    </div>` : ''}
                `;
            } else {
                // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                messageElement.innerHTML = `
                    ${!isCurrentUser ? `
                    <div class="message-avatar" style="background-color: ${getUserColor(msg.sender)}">
                        ${msg.sender.charAt(0)}
                    </div>` : ''}
                    
                    <div class="message-content">
                        ${!isCurrentUser ? `<div class="message-sender">${msg.sender}</div>` : ''}
                        <div class="message-text">${msg.text}</div>
                        <div class="message-time">${msg.time}</div>
                    </div>
                    
                    ${isCurrentUser ? `
                    <div class="message-avatar" style="background-color: ${currentUser.color}">
                        ${currentUser.name.charAt(0)}
                    </div>` : ''}
                `;
            }
            
            elements.messagesContainer.appendChild(messageElement);
        });
        
        elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    function sendMessage(text, isSticker = false, file = null) {
        if (!text && !file) return;
        
        const now = new Date();
        const time = `${now.getHours()}:${now.getMinutes().toString().padStart(2, '0')}`;
        
        const newMessage = {
            sender: currentUser.name,
            text: text,
            time: time,
            isSticker: isSticker,
            file: file
        };
        
        chats[activeChat].messages.push(newMessage);
        saveChatsToLocalStorage(chats);
        
        displayMessages(activeChat);
        loadChatsList();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
    function initStickers() {
        elements.stickersGrid.innerHTML = '';
        let selectedSticker = stickers[0];
        elements.stickerPreview.textContent = selectedSticker;
        
        stickers.forEach(sticker => {
            const stickerBtn = document.createElement('button');
            stickerBtn.className = 'sticker-btn';
            stickerBtn.textContent = sticker;
            
            stickerBtn.addEventListener('click', () => {
                selectedSticker = sticker;
                elements.stickerPreview.textContent = selectedSticker;
            });
            
            elements.stickersGrid.appendChild(stickerBtn);
        });
        
        elements.sendStickerBtn.addEventListener('click', () => {
            sendMessage(selectedSticker, true);
            elements.stickersModal.style.display = 'none';
        });
    }

    // –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
    async function handleFileUpload(file) {
        return new Promise((resolve) => {
            const reader = new FileReader();
            reader.onload = (e) => {
                resolve({
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    url: e.target.result
                });
            };
            reader.readAsDataURL(file);
        });
    }

    // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
    function getFileIcon(fileType) {
        if (fileType.includes('image')) return 'fa-image';
        if (fileType.includes('audio')) return 'fa-music';
        if (fileType.includes('video')) return 'fa-video';
        if (fileType.includes('pdf')) return 'fa-file-pdf';
        if (fileType.includes('zip') || fileType.includes('rar')) return 'fa-file-archive';
        return 'fa-file';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    function setupEventListeners() {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        elements.sendBtn.addEventListener('click', () => {
            const text = elements.messageInput.value.trim();
            if (text) {
                sendMessage(text);
                elements.messageInput.value = '';
            }
        });

        elements.messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && elements.messageInput.value.trim()) {
                sendMessage(elements.messageInput.value.trim());
                elements.messageInput.value = '';
            }
        });

        // –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        elements.logoutBtn.addEventListener('click', () => {
            localStorage.removeItem('currentUser');
            document.getElementById('app-container').style.display = 'none';
            document.getElementById('auth-container').style.display = 'block';
        });

        // –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        elements.attachBtn.addEventListener('click', () => {
            elements.fileModal.style.display = 'flex';
        });

        // –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤
        elements.stickersBtn.addEventListener('click', () => {
            elements.stickersModal.style.display = 'flex';
        });

        // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
        elements.clearChatBtn.addEventListener('click', () => {
            if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?')) {
                chats[activeChat].messages = [];
                saveChatsToLocalStorage(chats);
                displayMessages(activeChat);
                loadChatsList();
            }
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        elements.sendFileBtn.addEventListener('click', async () => {
            if (elements.fileInput.files.length > 0) {
                const file = elements.fileInput.files[0];
                const uploadedFile = await handleFileUpload(file);
                sendMessage('', false, uploadedFile);
                elements.fileInput.value = '';
                elements.fileModal.style.display = 'none';
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.querySelectorAll('.close-modal').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.modal').forEach(modal => {
                    modal.style.display = 'none';
                });
            });
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        window.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                e.target.style.display = 'none';
            }
        });
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    window.downloadFile = function(url, filename) {
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    };

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function loadChatsFromLocalStorage() {
        const savedChats = localStorage.getItem('kmes-chats');
        return savedChats ? JSON.parse(savedChats) : {
            'group-chat': {
                name: '–û–±—â–∏–π —á–∞—Ç',
                avatar: '–ö',
                color: 'linear-gradient(135deg, #2ecc71, #f1c40f, #e74c3c, #3498db)',
                messages: []
            },
            '–ê—Ä—Ç—É—Ä': { name: '–ê—Ä—Ç—É—Ä', avatar: '–ê', color: '#2ecc71', messages: [] },
            '–î–∞–º–∏—Ä': { name: '–î–∞–º–∏—Ä', avatar: '–î', color: '#f1c40f', messages: [] },
            '–ö–∞—Ä–∏–º': { name: '–ö–∞—Ä–∏–º', avatar: '–ö', color: '#e74c3c', messages: [] },
            '–¢–∏–º—É—Ä': { name: '–¢–∏–º—É—Ä', avatar: '–¢', color: '#3498db', messages: [] }
        };
    }

    function saveChatsToLocalStorage(chats) {
        localStorage.setItem('kmes-chats', JSON.stringify(chats));
    }

    function getUserColor(username) {
        switch(username) {
            case '–ê—Ä—Ç—É—Ä': return '#2ecc71';
            case '–î–∞–º–∏—Ä': return '#f1c40f';
            case '–ö–∞—Ä–∏–º': return '#e74c3c';
            case '–¢–∏–º—É—Ä': return '#3498db';
            default: return '#9b59b6';
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initStickers();
    loadChatsList();
    displayMessages(activeChat);
    setupEventListeners();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', () => {
    const authContainer = document.getElementById('auth-container');
    const appContainer = document.getElementById('app-container');
    const loginBtn = document.getElementById('login-btn');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    const errorMsg = document.getElementById('error-msg');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    if (currentUser) {
        authContainer.style.display = 'none';
        appContainer.style.display = 'flex';
        initMessenger(currentUser);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞
    loginBtn.addEventListener('click', () => {
        const username = usernameInput.value.trim();
        const password = passwordInput.value.trim();

        if (!username || !password) {
            errorMsg.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
            return;
        }

        if (users[username] && users[username].password === password) {
            const userData = {
                name: username,
                color: users[username].color
            };
            
            localStorage.setItem('currentUser', JSON.stringify(userData));
            authContainer.style.display = 'none';
            appContainer.style.display = 'flex';
            initMessenger(userData);
        } else {
            errorMsg.textContent = '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        }
    });

    passwordInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            loginBtn.click();
        }
    });
});