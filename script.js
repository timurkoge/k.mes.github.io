// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const users = {
    '–ê—Ä—Ç—É—Ä': { password: '125364', color: '#2ecc71' },
    '–î–∞–º–∏—Ä': { password: '154525', color: '#f1c40f' },
    '–ö–∞—Ä–∏–º': { password: '135635', color: '#e74c3c' },
    '–¢–∏–º—É—Ä': { password: '237560', color: '#3498db' }
};

// –°—Ç–∏–∫–µ—Ä—ã
const stickers = [
    'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£',
    'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞',
    'üòò', 'üòó', 'üòô', 'üòö', 'üòã', 'üòõ', 'üòù', 'üòú',
    'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü•∏', 'ü§©', 'ü•≥'
];

// –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –∏–∑ localStorage
function loadChatsFromLocalStorage() {
    const savedChats = localStorage.getItem('kmes-chats');
    return savedChats ? JSON.parse(savedChats) : {
        'group-chat': {
            name: '–û–±—â–∏–π —á–∞—Ç',
            avatar: '–ö',
            color: 'linear-gradient(135deg, #2ecc71, #f1c40f, #e74c3c, #3498db)',
            messages: []
        },
        '–ê—Ä—Ç—É—Ä': { name: '–ê—Ä—Ç—É—Ä', avatar: '–ê', color: '#2ecc71', messages: [] },
        '–î–∞–º–∏—Ä': { name: '–î–∞–º–∏—Ä', avatar: '–î', color: '#f1c40f', messages: [] },
        '–ö–∞—Ä–∏–º': { name: '–ö–∞—Ä–∏–º', avatar: '–ö', color: '#e74c3c', messages: [] },
        '–¢–∏–º—É—Ä': { name: '–¢–∏–º—É—Ä', avatar: '–¢', color: '#3498db', messages: [] }
    };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –≤ localStorage
function saveChatsToLocalStorage(chats) {
    localStorage.setItem('kmes-chats', JSON.stringify(chats));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserColor(username) {
    switch(username) {
        case '–ê—Ä—Ç—É—Ä': return '#2ecc71';
        case '–î–∞–º–∏—Ä': return '#f1c40f';
        case '–ö–∞—Ä–∏–º': return '#e74c3c';
        case '–¢–∏–º—É—Ä': return '#3498db';
        default: return '#9b59b6';
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
function getRandomReply() {
    const replies = [
        '–ü—Ä–∏–≤–µ—Ç!',
        '–ö–∞–∫ –¥–µ–ª–∞?',
        '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?',
        '–Ø —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç',
        '–î–∞–≤–∞–π –ø–æ–∑–∂–µ',
        '–•–æ—Ä–æ—à–æ',
        '–°–æ–≥–ª–∞—Å–µ–Ω',
        '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
        '–ü–æ–Ω—è—Ç–Ω–æ',
        '–°–ø–∞—Å–∏–±–æ!'
    ];
    return replies[Math.floor(Math.random() * replies.length)];
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
function initMessenger(currentUser) {
    let chats = loadChatsFromLocalStorage();
    let activeChat = 'group-chat';
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const userAvatar = document.getElementById('user-avatar');
    const userName = document.getElementById('user-name');
    const chatsList = document.getElementById('chats-list');
    const messagesContainer = document.getElementById('messages-container');
    const currentChatAvatar = document.getElementById('current-chat-avatar');
    const currentChatName = document.getElementById('current-chat-name');
    const messageInput = document.getElementById('message-input');
    const sendBtn = document.getElementById('send-btn');
    const logoutBtn = document.getElementById('logout-btn');
    const attachBtn = document.getElementById('attach-btn');
    const stickersBtn = document.getElementById('stickers-btn');
    const clearChatBtn = document.getElementById('clear-chat');
    const stickersModal = document.getElementById('stickers-modal');
    const fileModal = document.getElementById('file-modal');
    const stickersGrid = document.getElementById('stickers-grid');
    const fileInput = document.getElementById('file-input');
    const sendFileBtn = document.getElementById('send-file-btn');
    const closeModals = document.querySelectorAll('.close-modal');

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userAvatar.textContent = currentUser.name.charAt(0);
    userAvatar.style.backgroundColor = currentUser.color;
    userName.textContent = currentUser.name;

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    function loadChatsList() {
        chatsList.innerHTML = '';
        
        Object.keys(chats).forEach(chatId => {
            const chat = chats[chatId];
            const lastMessage = chat.messages.length > 0 
                ? chat.messages[chat.messages.length - 1].text 
                : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π';
            
            const chatItem = document.createElement('div');
            chatItem.className = `chat-item ${chatId === activeChat ? 'active' : ''}`;
            chatItem.setAttribute('data-chat', chatId);
            
            chatItem.innerHTML = `
                <div class="chat-avatar" style="background-color: ${chatId === 'group-chat' ? '' : getUserColor(chatId)}">
                    ${chat.avatar}
                </div>
                <div class="chat-info">
                    <div class="chat-name">${chat.name}</div>
                    <div class="chat-preview">${lastMessage}</div>
                </div>
            `;
            
            chatItem.addEventListener('click', () => {
                activeChat = chatId;
                loadChatsList();
                displayMessages(activeChat);
            });
            
            chatsList.appendChild(chatItem);
        });
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    function displayMessages(chatId) {
        const chat = chats[chatId];
        messagesContainer.innerHTML = '';
        currentChatName.textContent = chat.name;
        currentChatAvatar.textContent = chat.avatar;
        
        if (chatId === 'group-chat') {
            currentChatAvatar.style.background = chat.color;
        } else {
            currentChatAvatar.style.background = getUserColor(chatId);
        }
        
        chat.messages.forEach(msg => {
            const isCurrentUser = msg.sender === currentUser.name;
            const messageElement = document.createElement('div');
            messageElement.className = `message ${isCurrentUser ? 'my-message' : ''}`;
            
            if (msg.file) {
                // –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
                messageElement.innerHTML = `
                    ${!isCurrentUser ? `
                    <div class="message-avatar" style="background-color: ${getUserColor(msg.sender)}">
                        ${msg.sender.charAt(0)}
                    </div>` : ''}
                    
                    <div class="message-content">
                        ${!isCurrentUser ? `<div class="message-sender">${msg.sender}</div>` : ''}
                        <div class="file-message">
                            <div class="file-icon">
                                <i class="fas ${msg.file.type.includes('image') ? 'fa-image' : 'fa-file'}"></i>
                            </div>
                            <div class="file-name">${msg.file.name}</div>
                            <div class="file-download" onclick="downloadFile('${msg.file.url}', '${msg.file.name}')">
                                <i class="fas fa-download"></i>
                            </div>
                        </div>
                        <div class="message-time">${msg.time}</div>
                    </div>
                    
                    ${isCurrentUser ? `
                    <div class="message-avatar" style="background-color: ${currentUser.color}">
                        ${currentUser.name.charAt(0)}
                    </div>` : ''}
                `;
            } else {
                // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä
                messageElement.innerHTML = `
                    ${!isCurrentUser ? `
                    <div class="message-avatar" style="background-color: ${getUserColor(msg.sender)}">
                        ${msg.sender.charAt(0)}
                    </div>` : ''}
                    
                    <div class="message-content">
                        ${!isCurrentUser ? `<div class="message-sender">${msg.sender}</div>` : ''}
                        <div class="message-text">${msg.text}</div>
                        <div class="message-time">${msg.time}</div>
                    </div>
                    
                    ${isCurrentUser ? `
                    <div class="message-avatar" style="background-color: ${currentUser.color}">
                        ${currentUser.name.charAt(0)}
                    </div>` : ''}
                `;
            }
            
            messagesContainer.appendChild(messageElement);
        });
        
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    function sendMessage(text, isSticker = false, file = null) {
        if (!text && !file) return;
        
        const now = new Date();
        const time = `${now.getHours()}:${now.getMinutes().toString().padStart(2, '0')}`;
        
        const newMessage = {
            sender: currentUser.name,
            text: text || '',
            time: time,
            isSticker: isSticker,
            file: file
        };
        
        chats[activeChat].messages.push(newMessage);
        saveChatsToLocalStorage(chats);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        displayMessages(activeChat);
        loadChatsList();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
        if (activeChat !== 'group-chat') {
            setTimeout(() => {
                const replyMessage = {
                    sender: activeChat,
                    text: getRandomReply(),
                    time: `${now.getHours()}:${(now.getMinutes()+1).toString().padStart(2, '0')}`
                };
                
                chats[activeChat].messages.push(replyMessage);
                saveChatsToLocalStorage(chats);
                displayMessages(activeChat);
                loadChatsList();
            }, 1000 + Math.random() * 2000);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ (—ç–º—É–ª—è—Ü–∏—è)
    function uploadFile(file) {
        return new Promise((resolve) => {
            setTimeout(() => {
                const fileUrl = URL.createObjectURL(file);
                resolve({
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    url: fileUrl
                });
            }, 500);
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
    function initStickers() {
        stickersGrid.innerHTML = '';
        stickers.forEach(sticker => {
            const stickerElement = document.createElement('div');
            stickerElement.className = 'sticker';
            stickerElement.textContent = sticker;
            stickerElement.addEventListener('click', () => {
                sendMessage(sticker, true);
                stickersModal.style.display = 'none';
            });
            stickersGrid.appendChild(stickerElement);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    sendBtn.addEventListener('click', () => {
        const text = messageInput.value.trim();
        if (text) {
            sendMessage(text);
            messageInput.value = '';
        }
    });

    messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && messageInput.value.trim()) {
            sendMessage(messageInput.value.trim());
            messageInput.value = '';
        }
    });

    logoutBtn.addEventListener('click', () => {
        localStorage.removeItem('currentUser');
        document.getElementById('app-container').style.display = 'none';
        document.getElementById('auth-container').style.display = 'block';
    });

    attachBtn.addEventListener('click', () => {
        fileModal.style.display = 'flex';
    });

    stickersBtn.addEventListener('click', () => {
        stickersModal.style.display = 'flex';
    });

    clearChatBtn.addEventListener('click', () => {
        if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?')) {
            chats[activeChat].messages = [];
            saveChatsToLocalStorage(chats);
            displayMessages(activeChat);
            loadChatsList();
        }
    });

    sendFileBtn.addEventListener('click', async () => {
        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];
            const uploadedFile = await uploadFile(file);
            sendMessage('', false, uploadedFile);
            fileInput.value = '';
            fileModal.style.display = 'none';
        }
    });

    closeModals.forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelectorAll('.modal').forEach(modal => {
                modal.style.display = 'none';
            });
        });
    });

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    window.downloadFile = function(url, filename) {
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initStickers();
    loadChatsList();
    displayMessages(activeChat);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', () => {
    const authContainer = document.getElementById('auth-container');
    const appContainer = document.getElementById('app-container');
    const loginBtn = document.getElementById('login-btn');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    const errorMsg = document.getElementById('error-msg');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    if (currentUser) {
        authContainer.style.display = 'none';
        appContainer.style.display = 'flex';
        initMessenger(currentUser);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞
    loginBtn.addEventListener('click', () => {
        const username = usernameInput.value.trim();
        const password = passwordInput.value.trim();

        if (!username || !password) {
            errorMsg.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
            return;
        }

        if (users[username] && users[username].password === password) {
            const userData = {
                name: username,
                color: users[username].color
            };
            
            localStorage.setItem('currentUser', JSON.stringify(userData));
            authContainer.style.display = 'none';
            appContainer.style.display = 'flex';
            initMessenger(userData);
        } else {
            errorMsg.textContent = '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        }
    });

    passwordInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            loginBtn.click();
        }
    });
});